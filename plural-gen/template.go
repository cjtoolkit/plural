package main

type Context struct {
	PackageName string
	Source      string
	Glue        []Glue
}

type Glue struct {
	Locale      Locale
	PluralGroup PluralGroup
}

const codeTemplate = `// Code generated by plural-gen. DO NOT EDIT.
// Source: {{ .Source }}

package {{ .PackageName }}

import (
	"github.com/cjtoolkit/plural"
)

{{ range .Glue }}
// {{ .Locale.Locale }}
func {{ .Locale.FunctionName }}() *plural.PluralSpec { {{ with .PluralGroup }}
	fn := func(ops *plural.Operands) plural.Plural { {{range .PluralRules}}{{if .GoCondition}}
		// {{.Condition}}
		if {{.GoCondition}} {
			return plural.{{.CountTitle}}
		}{{end}}{{end}}
		return plural.Other
	}
	return plural.NewPluralSpec([]plural.Plural{ {{range $i, $e := .PluralRules}}{{if $i}}, {{end}}plural.{{$e.CountTitle}}{{end}} }, fn){{ end }}
}

{{ end }}
`

const testTemplate = `// Code generated by plural-gen. DO NOT EDIT.
// Source: {{ .Source }}

package {{ .PackageName }}

import (
	"testing"

	"github.com/cjtoolkit/plural"
	"github.com/cjtoolkit/plural/pluralTestUtil"
)

{{ range .Glue }}
// Test {{ .Locale.Locale }}
func Test{{ .Locale.FunctionNameTitle }}(t *testing.T) { {{ with .PluralGroup }}
	var tests []pluralTestUtil.PluralTest
	{{range .PluralRules}}
	{{if .IntegerExamples}}tests = pluralTestUtil.AppendIntegerTests(tests, plural.{{.CountTitle}}, {{printf "%#v" .IntegerExamples}}){{end}}
	{{if .DecimalExamples}}tests = pluralTestUtil.AppendDecimalTests(tests, plural.{{.CountTitle}}, {{printf "%#v" .DecimalExamples}}){{end}}
	{{end}}
	{{ end }}
	pluralTestUtil.Run(t, "{{ .Locale.FunctionName }}", {{ .Locale.FunctionName }}(), tests)
}

{{ end }}
`
